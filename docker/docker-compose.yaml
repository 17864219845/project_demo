services:
  api:
    image: standard/api:1.0.0
    restart: always
    environment:
      MODE: api
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
  worker:
    image: standard/api:1.0.0
    restart: always
    environment:
      MODE: worker
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./volumes/log/${CELERY_WORKER_FILE}:${CELERY_WORKER_FILE}
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    command: >
      postgres -c 'max_connections=${DB_POSTGRES_MAX_CONNECTIONS}'
               -c 'shared_buffers=${DB_POSTGRES_SHARED_BUFFERS}'
               -c 'work_mem=${DB_POSTGRES_WORK_MEM}'
               -c 'maintenance_work_mem=${DB_POSTGRES_MAINTENANCE_WORK_MEM}'
               -c 'effective_cache_size=${DB_POSTGRES_EFFECTIVE_CACHE_SIZE}'
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-h', 'db', '-U', '${PGUSER:-postgres}', '-d', '${POSTGRES_DB:-api}' ]
      interval: 1s
      timeout: 3s
      retries: 60
  redis:
    image: redis:6-alpine
    restart: always
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD}
    volumes:
      - ./volumes/redis/data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
networks:
  general:
    driver: bridge